import { MyContext } from "../../types";
import { createInlineKeyboard } from "../keyboards/createKeyboard";
import { menus } from "../../menus/menus";

export async function accountRender(ctx: MyContext, userID?: number) {
  try {
    const menu = menus["account"];
    const keyboard = await createInlineKeyboard(menu.buttons);
    const firstName = ctx.from?.first_name;
    const id = ctx.from?.id;
    const isAdress = ctx.session.adress;
    const isPhone = ctx.session.phone;
    if (keyboard) {
      if (isAdress && isPhone) {
        await ctx.editMessageText(
          `${firstName}\n\n–í–∞—à ID: ${id}\n\n‚òéÔ∏è–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${ctx.session.phone}\n\nüè†–í–∞—à –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${ctx.session.adress}\n\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–π–¥—è –≤ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é:`,
          { reply_markup: keyboard, parse_mode: "MarkdownV2" }
        );
      } else {
        await ctx.editMessageText(
          `${firstName}\n\n–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–π–¥—è –≤ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é:`,
          { reply_markup: keyboard, parse_mode: "MarkdownV2" }
        );
      }
    } else {
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");
    }
  } catch (error) {
    console.error(error);
  }
}

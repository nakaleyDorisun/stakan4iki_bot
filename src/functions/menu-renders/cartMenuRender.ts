import {
  createInlineKeyboard,
  createReplyKeyboard,
} from "../keyboards/createKeyboard";
import { menus } from "../../menus/menus";
import { MyContext } from "../../types";
import { handleMenuSection } from "../createFunctions/handleMenuSection";

export async function cartMenuRender(ctx: MyContext) {
  try {
    ctx.session.menuHistory.push("cart");
    const menuCart = menus["cart"];
    const menuCartItem = menus["cartItem"];
    const keyboardCart = createInlineKeyboard(menuCart.buttons);
    const keyboardItem = createInlineKeyboard(menuCartItem.buttons);
    const isCart = ctx.session.cart.length;
    if (isCart) {
      const cartBodyMessage = ctx.session.cart
        .map(
          (item) => `üìç ${item.name} - ${item.amount} —à—Ç. - ${item.price}‚ÇΩ\n`
        )
        .join("");
      const cartResultMessage = `–í—Å–µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Ç–æ–≤–∞—Ä–æ–≤: ${ctx.session.cart.length} \n –Ω–∞ —Å—É–º–º—É: ${ctx.session.totalRub}‚ÇΩ`;
      await ctx.reply("–í –∫–æ—Ä–∑–∏–Ω–µ:");

      await ctx.reply(cartBodyMessage, { reply_markup: keyboardItem });

      await ctx.reply(cartResultMessage, {
        reply_markup: keyboardCart,
      });
    } else {
      await ctx.reply("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –≤—ã–±–∏—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞");
      const keyboardCatalog = await createReplyKeyboard(ctx, "keyboardCatalog");
      if (keyboardCatalog) {
        await handleMenuSection(ctx, "–ö–∞—Ç–∞–ª–æ–≥üìï", keyboardCatalog, "catalog");
      } else {
        console.error("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞.");
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }
    }
  } catch (error) {
    console.error(error);
  }
}

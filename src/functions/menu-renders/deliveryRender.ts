import { menus } from "../../menus/menus";
import { MyContext } from "../../types";
import { createInlineKeyboard } from "../keyboards/createKeyboard";

export async function deliveryRender(ctx: MyContext, useId?: number) {
  try {
    //////////////////////////////////////////////////
    if (ctx.callbackQuery?.message) {
      console.log(ctx.callbackQuery.message.message_id, "from deliveryRender");
    } /////////////////////////////////////////////////
    ctx.session.menuHistory.push("delivery");
    const menu = menus["delivery"];
    const keyboard = await createInlineKeyboard(menu.buttons);
    const isOrder = ctx.session.orders;
    console.log(isOrder, "isOrder");
    if (keyboard) {
      if (isOrder.length) {
        const message = ctx.session.orders.map((order) => order.text);
        await ctx.editMessageText(`–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:${message}`, {
          reply_markup: keyboard,
        });
      } else {
        ctx.editMessageText(
          "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤üôÅ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä",
          {
            reply_markup: keyboard,
            parse_mode: "MarkdownV2",
          }
        );
      }
    } else {
      console.error("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞.");
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏");
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏");
  }
}

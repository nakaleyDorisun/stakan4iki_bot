import { MyContext } from "../../types";
import { createInlineKeyboard } from "../keyboards/createKeyboard";
import { menus } from "../../menus/menus";

export async function adressEmptyRender(ctx: MyContext) {
  try {
    const menu = menus["adressEmpty"];
    const keyboard = await createInlineKeyboard(menu.buttons);
    if (keyboard) {
      const message =
        "üì≤–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\nüìç–ì–æ—Ä–æ–¥\nüìç–£–ª–∏—Ü—É\nüìç–ù–æ–º–µ—Ä –¥–æ–º–∞ (–Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞ / –∫–≤–∞—Ä—Ç–∏—Ä—ã / –ø–æ–º–µ—â–µ–Ω–∏—è)\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –≥.–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª.–ë—Ä–∞–º—Å–∞ –¥.45, –æ—Ñ.1";
      ctx.session.menuHistory.push("adressEmpty");
      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: "HTML",
      });
    } else {
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");
    }
  } catch (error) {
    console.error(error);
  }
}

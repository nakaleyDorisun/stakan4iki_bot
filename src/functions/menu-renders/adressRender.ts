import { MyContext } from "../../types";
import { createInlineKeyboard } from "../keyboards/createKeyboard";
import { menus } from "../../menus/menus";

export async function adressRender(ctx: MyContext, userID?: number) {
  try {
    const menu = menus["adress"];
    const keyboard = await createInlineKeyboard(menu.buttons);
    const adress = ctx.session.adress;
    if (adress) {
      const message = `–í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${adress}\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å‚öôÔ∏è"`;
      if (keyboard) {
        ctx.session.menuHistory.push("adress");
        await ctx.editMessageText(message, {
          reply_markup: keyboard,
          parse_mode: "HTML",
        });
      } else {
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");
      }
    } else {
      const message =
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\nüìç–ì–æ—Ä–æ–¥\nüìç –£–ª–∏—Ü—É\nüìç–ù–æ–º–µ—Ä –¥–æ–º–∞ (–Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞ / –∫–≤–∞—Ä—Ç–∏—Ä—ã / –ø–æ–º–µ—â–µ–Ω–∏—è)\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –≥.–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª.–ë—Ä–∞–º—Å–∞ –¥.45, –æ—Ñ.1";
      if (keyboard) {
        ctx.session.menuHistory.push("adress");
        ctx.session.isWaitingForAdress = true;
        await ctx.editMessageText(message, {
          reply_markup: keyboard,
          parse_mode: "HTML",
        });
      } else {
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");
      }
    }
  } catch (error) {
    console.error(error);
  }
}

import { menus } from "../../../menus/menus";
import { StakanchikAI } from "../../../stakanchikAI/stakanchikAI";
import { MyContext } from "../../../types";
import { createInlineKeyboard } from "../../keyboards/createKeyboard";
import { menuRenderExport } from "../../menu-renders/_menuRenderExport";

export async function handlerPersonalDataRegister(ctx: MyContext) {
  // const chatID = ctx.chat?.id;
  // const messageID = ctx.message?.message_id;
  const menuAdress = menus["adress"];
  const menuPhone = menus["phone"];
  const message = ctx.message?.text ? ctx.message.text : "";

  const isWaitingForPhone = ctx.session.isWaitingForPhone;
  const isWaitingForAdress = ctx.session.isWaitingForAdress;
  const isWaitingForPhoneChange = ctx.session.isWaitingForPhoneChange;
  const isWaitingForAdressChange = ctx.session.isWaitingForAdressChange;
  const isPhoneCorrect = /^\+?[0-9\s\-\(\)]{6,}$/;
  const isAdressCorrect = message.length > 10;
  const keyboardAdress = await createInlineKeyboard(menuAdress.buttons);
  const keyboardPhone = await createInlineKeyboard(menuPhone.buttons);

  if (isWaitingForPhone || isWaitingForAdress) {
    if (isWaitingForPhone && !isWaitingForAdress) {
      if (isPhoneCorrect.test(message) /*&& chatID && messageID*/) {
        ctx.session.phone = message;
        ctx.session.isWaitingForPhone = false;
        await ctx.reply(`–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.phone}`, {
          reply_markup: keyboardPhone,
        });
        // await ctx.deleteMessage();
      } else {
        // await ctx.deleteMessage();
        await ctx.reply(
          `–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –º–∏–Ω–∏–º 6 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä\n\n89123123123 –∏–ª–∏ +79123123123`
        );
      }
    } else {
      if (isAdressCorrect && message) {
        ctx.session.adress = ctx.message?.text;
        ctx.session.isWaitingForAdress = false;
        // await ctx.deleteMessage();
        const aswer = await ctx.reply(
          `–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∞–¥—Ä–µ—Å: ${ctx.session.adress}`,
          {
            reply_markup: keyboardAdress,
          }
        );
        await menuRenderExport.accountRender(ctx);
        // const chatID = aswer.chat?.id;
        // const messageID = aswer.message_id;
        // setInterval(async () => {
        //   await ctx.api.deleteMessage(chatID, messageID);
        // }, 1500);
      } else {
        // await ctx.deleteMessage();
        await ctx.reply(
          `–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\nüìç–ì–æ—Ä–æ–¥\nüìç –£–ª–∏—Ü—É\nüìç–ù–æ–º–µ—Ä –¥–æ–º–∞ (–Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞ / –∫–≤–∞—Ä—Ç–∏—Ä—ã / –ø–æ–º–µ—â–µ–Ω–∏—è)\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –≥.–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª.–ë—Ä–∞–º—Å–∞ –¥.45, –æ—Ñ.1";`
        );
      }
    }
  } else {
    if (isWaitingForPhoneChange || isWaitingForAdressChange) {
      if (isWaitingForPhoneChange && !isWaitingForAdressChange) {
        if (isPhoneCorrect && message) {
          ctx.session.phone = ctx.message?.text;
          ctx.session.isWaitingForPhoneChange = false;
          // await ctx.deleteMessage();
          await ctx.reply(`–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞: ${ctx.session.phone}`, {
            reply_markup: keyboardPhone,
          });
        } else {
          // await ctx.deleteMessage();
          await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞`);
        }
      } else {
        if (isAdressCorrect && message) {
          ctx.session.adress = ctx.message?.text;
          ctx.session.isWaitingForAdressChange = false;
          // ctx.session.isWaitingForPhoneChange = false;
          // await ctx.deleteMessage();
          await ctx.reply(`–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∞–¥—Ä–µ—Å –Ω–∞: ${ctx.session.adress}`, {
            reply_markup: keyboardAdress,
          });
        } else {
          // await ctx.deleteMessage();
          await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏`);
        }
      }
    }
  }
  await StakanchikAI(ctx);
}

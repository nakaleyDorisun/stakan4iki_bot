import { menus } from "../../../menus/menus";
import { StakanchikAI } from "../../../stakanchikAI/stakanchikAI";
import { MyContext } from "../../../types";
import { createInlineKeyboard } from "../../keyboards/createKeyboard";

export async function handlerPersonalDataRegister(ctx: MyContext) {
  const chatID = ctx.chat?.id;
  console.log(ctx.session.messageId, "ctx.session.messageId");
  const menuAdress = menus["adress"];
  const menuAdressEmpty = menus["adressEmpty"];
  const menuAdressChange = menus["adressChange"];
  const menuPhone = menus["phone"];
  const menuPhoneEmpty = menus["phoneEmpty"];
  const menuPhoneChange = menus["phoneChange"];
  const messageInput = ctx.message?.text ? ctx.message.text : "";
  const messageInputId = ctx.message?.message_id;
  console.log(messageInput, "messageInput");
  console.log(messageInputId, "messageInputId");
  const isWaitingForPhone = ctx.session.isWaitingForPhone;
  const isWaitingForAdress = ctx.session.isWaitingForAdress;
  const isWaitingForPhoneChange = ctx.session.isWaitingForPhoneChange;
  const isWaitingForAdressChange = ctx.session.isWaitingForAdressChange;
  const isPhoneCorrect = /^\+?[0-9\s\-\(\)]{6,}$/;
  const isAdressCorrect = messageInput.length > 10;
  const keyboardAdress = await createInlineKeyboard(menuAdress.buttons);
  const keyboardAdressEmpty = await createInlineKeyboard(
    menuAdressChange.buttons
  );
  const keyboardAdressChange = await createInlineKeyboard(
    menuAdressEmpty.buttons
  );
  const keyboardPhone = await createInlineKeyboard(menuPhone.buttons);
  const keyboardPhoneEmpty = await createInlineKeyboard(menuPhoneEmpty.buttons);
  const keyboardPhoneChange = await createInlineKeyboard(
    menuPhoneChange.buttons
  );

  if (isWaitingForPhone || isWaitingForAdress) {
    if (isWaitingForPhone && !isWaitingForAdress) {
      if (isPhoneCorrect.test(messageInput) && messageInput && messageInputId) {
        ctx.session.phone = messageInput;
        ctx.session.isWaitingForPhone = false;
        const message = await ctx.reply(
          `–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.phone}`,
          {
            reply_markup: keyboardPhone,
          }
        );
        ctx.session.messagesFromUserInput.push(messageInputId); /////
        console.log(
          ctx.session.messagesFromUserInput,
          "ctx.session.messagesFromUserInput"
        );
        if (ctx.session.messagesFromUserInput) {
          await ctx.deleteMessages(ctx.session.messagesFromUserInput);
        }
        if (ctx.session.messageId) {
          await ctx.api.deleteMessage(chatID as number, ctx.session.messageId);
        } else {
          console.log("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, ctx.session.messageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        }
        ctx.session.messageId = message.message_id;
        console.log(ctx.session.messageId, "–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:");
      } else if (messageInputId) {
        const message = await ctx.reply(
          `‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–ù–æ–º–µ—Ä  –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –º–∏–Ω–∏–º 6 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä\n\n89123123123 | +79123123123 | +7-912-312-31-13`,
          { reply_markup: keyboardPhoneEmpty }
        );
        ctx.session.messagesFromUserInput.push(messageInputId); /////
        console.log(
          ctx.session.messagesFromUserInput,
          "ctx.session.messagesFromUserInput"
        );
        console.log(ctx.session.messageId, "–û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        if (ctx.session.messageId) {
          await ctx.api.deleteMessage(chatID as number, ctx.session.messageId);
        } else {
          console.log("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, ctx.session.messageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        }
        ctx.session.messageId = message.message_id;
      }
    } else {
      if (isAdressCorrect && messageInput && messageInputId) {
        ctx.session.adress = ctx.message?.text;
        ctx.session.isWaitingForAdress = false;
        const message = await ctx.reply(
          `–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∞–¥—Ä–µ—Å: ${ctx.session.adress}`,
          {
            reply_markup: keyboardAdress,
          }
        );
        ctx.session.messagesFromUserInput.push(messageInputId); /////
        console.log(
          ctx.session.messagesFromUserInput,
          "ctx.session.messagesFromUserInput"
        );
        if (ctx.session.messagesFromUserInput) {
          await ctx.deleteMessages(ctx.session.messagesFromUserInput);
        }
        if (ctx.session.messageId) {
          await ctx.api.deleteMessage(chatID as number, ctx.session.messageId);
        } else {
          console.log("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, ctx.session.messageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        }
        ctx.session.messageId = message.message_id;
        console.log(ctx.session.messageId, "–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∞–¥—Ä–µ—Å:");
      } else if (messageInputId) {
        ctx.session.messagesFromUserInput.push(messageInputId); /////
        console.log(
          ctx.session.messagesFromUserInput,
          "ctx.session.messagesFromUserInput"
        );
        const message = await ctx.reply(
          `‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\nüìç–ì–æ—Ä–æ–¥\nüìç –£–ª–∏—Ü—É\nüìç–ù–æ–º–µ—Ä –¥–æ–º–∞ (–Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞ / –∫–≤–∞—Ä—Ç–∏—Ä—ã / –ø–æ–º–µ—â–µ–Ω–∏—è)\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –≥.–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª.–ë—Ä–∞–º—Å–∞ –¥.45, –æ—Ñ.1`,
          { reply_markup: keyboardAdressEmpty }
        );
        if (ctx.session.messageId) {
          await ctx.api.deleteMessage(chatID as number, ctx.session.messageId);
        } else {
          console.log("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, ctx.session.messageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        }
        ctx.session.messageId = message.message_id;
        console.log(ctx.session.messageId, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏");
      }
    }
  } else {
    if (isWaitingForPhoneChange || isWaitingForAdressChange) {
      if (isWaitingForPhoneChange && !isWaitingForAdressChange) {
        if (
          isPhoneCorrect.test(messageInput) &&
          messageInput &&
          messageInputId
        ) {
          ctx.session.phone = ctx.message?.text;
          ctx.session.isWaitingForPhoneChange = false;
          const message = await ctx.reply(
            `–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞: ${ctx.session.phone}`,
            {
              reply_markup: keyboardPhoneChange,
            }
          );
          ctx.session.messagesFromUserInput.push(messageInputId); /////
          console.log(
            ctx.session.messagesFromUserInput,
            "ctx.session.messagesFromUserInput"
          );
          if (ctx.session.messagesFromUserInput) {
            await ctx.deleteMessages(ctx.session.messagesFromUserInput);
          }
          if (ctx.session.messageId) {
            await ctx.api.deleteMessage(
              chatID as number,
              ctx.session.messageId
            );
          } else {
            console.log("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, ctx.session.messageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
          }
          ctx.session.messageId = message.message_id;
        } else if (messageInputId) {
          ctx.session.messagesFromUserInput.push(messageInputId); /////
          console.log(
            ctx.session.messagesFromUserInput,
            "ctx.session.messagesFromUserInput"
          );
          const message = await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞`, {
            reply_markup: keyboardPhoneChange,
          });
          if (ctx.session.messageId) {
            await ctx.api.deleteMessage(
              chatID as number,
              ctx.session.messageId
            );
          } else {
            console.log("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, ctx.session.messageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
          }
          ctx.session.messageId = message.message_id;
        }
      } else {
        if (isAdressCorrect && messageInput && messageInputId) {
          ctx.session.adress = ctx.message?.text;
          ctx.session.isWaitingForAdressChange = false;
          const message = await ctx.reply(
            `–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∞–¥—Ä–µ—Å –Ω–∞: ${ctx.session.adress}`,
            {
              reply_markup: keyboardAdressChange,
            }
          );
          ctx.session.messagesFromUserInput.push(messageInputId); /////
          console.log(
            ctx.session.messagesFromUserInput,
            "ctx.session.messagesFromUserInput"
          );
          if (ctx.session.messagesFromUserInput) {
            await ctx.deleteMessages(ctx.session.messagesFromUserInput);
          }
          if (ctx.session.messageId) {
            await ctx.api.deleteMessage(
              chatID as number,
              ctx.session.messageId
            );
          } else {
            console.log("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, ctx.session.messageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
          }
          ctx.session.messageId = message.message_id;
        } else if (messageInputId) {
          const message = await ctx.reply(
            `‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\nüìç–ì–æ—Ä–æ–¥\nüìç –£–ª–∏—Ü—É\nüìç–ù–æ–º–µ—Ä –¥–æ–º–∞ (–Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞ / –∫–≤–∞—Ä—Ç–∏—Ä—ã / –ø–æ–º–µ—â–µ–Ω–∏—è)\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –≥.–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª.–ë—Ä–∞–º—Å–∞ –¥.45, –æ—Ñ.1`,
            { reply_markup: keyboardAdressChange }
          );
          ctx.session.messagesFromUserInput.push(messageInputId); /////
          console.log(
            ctx.session.messagesFromUserInput,
            "ctx.session.messagesFromUserInput"
          );
          if (ctx.session.messageId) {
            await ctx.api.deleteMessage(
              chatID as number,
              ctx.session.messageId
            );
          } else {
            console.log("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, ctx.session.messageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
          }
          ctx.session.messageId = message.message_id;
        }
      }
    }
  }
  await StakanchikAI(ctx);
}

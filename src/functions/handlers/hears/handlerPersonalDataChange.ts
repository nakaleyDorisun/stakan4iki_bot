
import { StakanchikAI } from "../../../stakanchikAI/stakanchikAI";
import { MyContext } from "../../../types";
import { handleMenuSection } from "../../createFunctions/handleMenuSection";
import { createSimpleReplyKeyboard } from "../../keyboards/createKeyboard";
import { simpleKeyboards } from "../../keyboards/keyboardsSimple";

export async function handlerPersonalDataChange(ctx: MyContext) {
  if (ctx.message?.text) {
    const message = ctx.message.text;
    const isWaitingForPhone = ctx.session.isWaitingForPhone;
    const isWaitingForAdress = ctx.session.isWaitingForAdress;
    const isPhoneCorrect = /^\+?[0-9\s\-\(\)]{6,}$/;
    const isAdressCorrect = message.length > 5;
    //–µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤—Ä–µ–Ω–æ –∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    if (
      !isPhoneCorrect.test(message) &&
      isWaitingForPhone &&
      !isWaitingForAdress
    ) {
      await ctx.reply(
        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 6 —Ü–∏—Ñ—Ä, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        {
          reply_markup: { remove_keyboard: true },
        }
      );
      //return;
    } else if (!isAdressCorrect) {
      // –µ—Å–ª–∏ –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å—Å–∞ –∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      await ctx.reply(
        "–ù–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: –≥.–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª.–ë—Ä–∞–º—Å–∞ –¥.54",
        {
          reply_markup: { remove_keyboard: true },
        }
      );
    }
    if (
      isWaitingForPhone &&
      isPhoneCorrect.test(message) &&
      !isWaitingForAdress
    ) {
      ctx.session.phone = message;
      ctx.session.isWaitingForPhone = false;
      await ctx.reply(`–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${ctx.session.phone}`);
      const keyboardAccount = await createSimpleReplyKeyboard(
        ctx,
        simpleKeyboards.KEYBOARD_ACCOUNT
      );
      if (keyboardAccount) {
        handleMenuSection(ctx, "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüîê", keyboardAccount, "account");
      } else {
        console.error(
          `–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. keyboardAccount = ${keyboardAccount}`
        );
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }
      return;
    } else if (isAdressCorrect) {
      ctx.session.adress = message;
      ctx.session.isWaitingForPhone = false;
      await ctx.reply(`–í–∞—à –∞–¥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${ctx.session.adress}`);
      ctx.session.isWaitingForAdress = false;
      const keyboardAccount = await createSimpleReplyKeyboard(
        ctx,
        simpleKeyboards.KEYBOARD_ACCOUNT
      );
      if (keyboardAccount) {
        handleMenuSection(ctx, "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüîê", keyboardAccount, "account");
      } else {
        console.error(
          `–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. keyboardAccount = ${keyboardAccount}`
        );
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }
    }
  } else {
    await StakanchikAI(ctx);
  }
}

import { MyContext } from "../../../types";
import { handleMenuSection } from "../../createFunctions/handleMenuSection";
import { createSimpleReplyKeyboard } from "../../keyboards/createKeyboard";
import { simpleKeyboards } from "../../keyboards/keyboardsSimple";

export async function handlerAdress(ctx: MyContext) {
  const keyboardAdress = await createSimpleReplyKeyboard(
    ctx,
    simpleKeyboards.KEYBOARD_ADDRESS
  );
  if (keyboardAdress) {
    await handleMenuSection(ctx, "–ê–¥—Ä–µ—Åüè†", keyboardAdress /*"adress"*/);
  } else {
    console.error("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –∞–¥—Ä–µ—Å–∞.");
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
  if (!ctx.session.adress) {
    ctx.session.isWaitingForAdress = true;
    await ctx.reply("–ê–¥—Ä–µ—Åüè† –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç");
    await ctx.reply(
      "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n- –≥–æ—Ä–æ–¥\n- —É–ª–∏—Ü—É\n- –Ω–æ–º–µ—Ä –¥–æ–º–∞ (–Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞ / –∫–≤–∞—Ä—Ç–∏—Ä—ã / –ø–æ–º–µ—â–µ–Ω–∏—è\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –≥.–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª.–ë—Ä–∞–º—Å–∞ –¥.45, –æ—Ñ.1",
      {
        reply_markup: { remove_keyboard: true },
      }
    );
  } else {
    await ctx.reply(`–í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${ctx.session.adress}`);
    ctx.session.isWaitingForAdress = false; //
  }
}

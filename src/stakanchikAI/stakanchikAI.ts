import { handleMenuSection } from "../functions/createFunctions/handleMenuSection";
import { createReplyKeyboard } from "../functions/keyboards/createKeyboard";
import { MyContext } from "../types";

export async function StakanchikAI(ctx: MyContext) {
  let isCatalog;
  let isCap;
  let isTop;

  if (ctx.message?.text) {
    const message = ctx.message.text.toLocaleLowerCase();
    isCatalog =
      message === "–∫–∞—Ç–∞–ª–æ–≥" ||
      message === "–∫–∞—Ç–∞–ª–∞–≥" ||
      message === "–∫—É–ø–∏—Ç—å" ||
      message === "–ø–æ–∫—É–ø–∫–∞" ||
      message === "–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç";
    isCap =
      message === "—Å—Ç–∞–∫–∞–Ω" ||
      message === "—Å—Ç–∞–∫–∞–Ω—á–∏–∫" ||
      message === "—Å—Ç–∞–∫–∞–Ω—ã" ||
      message === "–∫—É–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω—ã" ||
      message === "—Å—Ç–æ–∫–∞–Ω—ã";
    isTop =
      message === "–∫—Ä—ã—à–∫–∞" ||
      message === "–∫—Ä—ã—à–µ—á–∫–∞" ||
      message === "–∫—Ä—ã—à–∫–∏" ||
      message === "–∫—É–ø–∏—Ç—å –∫—Ä—ã—à–∫—É" ||
      message === "–∫—Ä—ã–∂–∫–∞" ||
      message === "–∫—Ä—ã–∂–∫–∏";
  }

  if (isCatalog) {
    const keyboardCatalog = await createReplyKeyboard(ctx, "keyboardCatalog");
    if (keyboardCatalog) {
      handleMenuSection(ctx, "–ö–∞—Ç–∞–ª–æ–≥üìï", keyboardCatalog, "catalog");
    } else {
      console.error("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞.");
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  }
  if (isCap) {
    const keyboardCatalog = await createReplyKeyboard(ctx, "keyboardCatalog");
    if (keyboardCatalog) {
      handleMenuSection(
        ctx,
        "–ö–∞—Ç–∞–ª–æ–≥üìï",
        keyboardCatalog,
        "button_allCaps_click"
      );
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
      console.error("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞.");
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  }
  if (isTop) {
    const keyboardCatalog = await createReplyKeyboard(ctx, "keyboardCatalog");
    if (keyboardCatalog) {
      handleMenuSection(
        ctx,
        "–ö–∞—Ç–∞–ª–æ–≥üìï",
        keyboardCatalog,
        "button_allTops_click"
      );
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
      console.error("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞.");
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  }
}
